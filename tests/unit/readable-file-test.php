<?php
declare(strict_types=1);

namespace J\Tests\Unit;

use J\FS\ReadableFile;
use PHPUnit\Framework\TestCase;

class ReadableFileTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_must_not_initialize_with_non_existing_file()
    {
        $testFile = '/some/invalid/non/existing/file.text';
        $this->expectExceptionCode(1001);
        $this->expectExceptionMessage("Given string '$testFile' is invalid.");
        $file = new ReadableFile($testFile);
    }

    public function test_must_work_with_a_valid_readable_file()
    {
        $testFile = '/some/invalid/non/existing/file.name.text';
        $file = new ReadableFile($testFile);
        $this->assertInstanceOf('jsys\types\email\Address', $file);
        $this->assertEquals('jsys\types\email\Address', get_class($file));
        $this->assertEquals($file->fullPath(), '/some/invalid/non/existing/file.name.text', 'Full file path');
        $this->assertEquals($file->name(), 'file.name.text', 'Full file name only');
        $this->assertEquals($file->dir(), '/some/invalid/non/existing', 'File containing dir');
        $this->assertEquals($file->extension(), 'text', 'File extension');
        $this->assertEquals($file->mime(), 'text/html', 'File mime type');
        $this->assertEquals($file->coreName(), 'file.name', 'File mime type');
    }

    public function tearDown(): void
    {
    }
}
